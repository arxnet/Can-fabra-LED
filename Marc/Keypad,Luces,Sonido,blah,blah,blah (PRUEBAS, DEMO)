//Cogemos partes de codigo ya hechos para no tener que repetirlo en este documento
#include "pitches.h"
#include "iluminacionMelodia.h"
#include "melodia_DEMO_.h"
#include <Keypad.h>

//definimos variables
int duration = 100;  // 500 milisegundos


//definimos la composición del keypad
const byte ROWS = 4; //four rows
const byte COLS = 4; //four columns
//definir los símbolos en los botones del keypad
char hexaKeys[ROWS][COLS] = {
  {'1','2','3','A'},
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','D'}
};
byte rowPins[ROWS] = {11, 10, 9, 8}; //connect to the row pinouts of the keypad
byte colPins[COLS] = {7, 6, 5, 4}; //connect to the column pinouts of the keypad
//inicializar una instancia de la clase NewKeypad
Keypad customKeypad = Keypad( makeKeymap(hexaKeys), rowPins, colPins, ROWS, COLS); 
void setup(){
  Serial.begin(9600);
  
  FastLED.addLeds<NEOPIXEL, DATA_PIN>(leds, NUM_LEDS);
  FastLED.setBrightness(60);
  leds[0] = CRGB::Red;
      FastLED.show();
  delay(1000);
       leds[0] = CRGB::Black;
      FastLED.show();
}

//función para que se enciandan los leds a la vez del sonido
void encenderLucesYSonido(int luzInicial, int luzFinal, int nota, CRGB color){
      tone(12, nota, duration*0.9);
      for (int i=luzInicial; i< luzFinal -1; i++) {
        leds[i] = color;
      } 
      FastLED.show();
      delay(duration);
}

//El void que se repite repetidamente, escaneando si se pulsan los botones
void loop(){
  char customKey = customKeypad.getKey();
  if (customKey){
    Serial.println(customKey);
    if(customKey=='1'){
      encenderLucesYSonido(87,92, NOTE_C4, CRGB::Indigo);
    } 
    if(customKey=='2') {
      encenderLucesYSonido(84,95, NOTE_D4, CRGB::Amethyst);
    }
    if(customKey=='3') {
      encenderLucesYSonido(81,99, NOTE_E4, CRGB::DarkBlue);
    }
    if(customKey=='4') {
      encenderLucesYSonido(75,105, NOTE_F4, CRGB::DodgerBlue);
    }
    if(customKey=='5') {
      encenderLucesYSonido(60,120, NOTE_G4, CRGB::DarkTurquoise);
    }
    if(customKey=='6') {
      encenderLucesYSonido(46,134, NOTE_A4, CRGB::Green);
    }
    if(customKey=='7') {
      encenderLucesYSonido(33,147, NOTE_B4, CRGB::LawnGreen);
    }
    if(customKey=='8') {
      encenderLucesYSonido(21,159, NOTE_C5, CRGB::Yellow);
    }
    if(customKey=='9') {
      encenderLucesYSonido(10,170, NOTE_D5, CRGB::Orange);
    }
    if(customKey=='0') {
      encenderLucesYSonido(0,179, NOTE_E5, CRGB::Red);
    }

    if(customKey=='A') {
      melodia(4);
    }

    if(customKey=='B') {
     // melodia(melody2, tempo2);
    }

    if(customKey=='C') {
      //melodia(melody3, tempo3);
    }

    if(customKey=='D') {
      //melodia(melody4, tempo4);
    }

    if(customKey=='*') {
      //melodia(melody5, tempo5);
    }

    if(customKey=='#') {
     // melodia(melody6, tempo6);
    }

  } //end if del largo
    else{
    noTone(12);
     for (int i=0; i< NUM_LEDS ; i++) {
        leds[i] = CRGB::Black;
      } 
      FastLED.show();
  }
  
  }//end del loop

____________________________________________________
NUEVO ARCHIVO (IluminacionMelodia.h)

#include <FastLED.h>

//Definimos cuantos leds hay y el data pin donde tenemos la tira led
#define NUM_LEDS 179
#define DATA_PIN 13

CRGB leds[NUM_LEDS];

//Función para que se enciendan un cierto numero de leds y de un cierto color dependiendo de la frecuencia del sonido
void iluminarMelodia( int frecuencia) {
  //Serial.println(frecuencia);
  int numeroDeLedsAIluminar = map (frecuencia, 0, 1600, 0, (NUM_LEDS/2) -1);
  for (int i = 0; i < NUM_LEDS; i++) {
    leds[i] = CRGB::Black;
  }
  for (int i = 0; i < numeroDeLedsAIluminar; i++) {
    leds [(NUM_LEDS/2) -i] = CRGB::Red;
    leds [(NUM_LEDS/2) -i].setHue(map(frecuencia, 0, 1200, 0, 230));
    leds [(NUM_LEDS/2) +i] = CRGB::Red;
    leds [(NUM_LEDS/2) +i].setHue(map(frecuencia, 0, 1200, 0, 230));
  }
  FastLED.show();
  
}


____________________________________________________
NUEVO ARCHIVO (melodia_DEMO_.h)

#include "pitches.h"

int tempo1 = 114;
int tempo2 = 180;
int tempo3 = 105;
int tempo4 = 120;
int tempo5 = 200;
int tempo6 = 144;
// change this to make the song slower or faster


// change this to whichever pin you want to use
int buzzer = 12;

// notes of the moledy followed by the duration.
// a 4 means a quarter note, 8 an eighteenth , 16 sixteenth, so on
// !!negative numbers are used to represent dotted notes,
// so -4 means a dotted quarter note, that is, a quarter plus an eighteenth!!
int melody1[] = {

  // Never Gonna Give You Up - Rick Astley
  // Score available at https://musescore.com/chlorondria_5/never-gonna-give-you-up_alto-sax
  // Arranged by Chlorondria

  NOTE_A4,16, NOTE_B4,16, NOTE_D5,16, NOTE_B4,16,
  NOTE_FS5,-8, NOTE_FS5,-8, NOTE_E5,-4, NOTE_A4,16, NOTE_B4,16, NOTE_D5,16, NOTE_B4,16,

  NOTE_E5,-8, NOTE_E5,-8, NOTE_D5,-8, NOTE_CS5,16, NOTE_B4,-8, NOTE_A4,16, NOTE_B4,16, NOTE_D5,16, NOTE_B4,16, //18
  NOTE_D5,4, NOTE_E5,8, NOTE_CS5,-8, NOTE_B4,16, NOTE_A4,8, NOTE_A4,8, NOTE_A4,8, 
  NOTE_E5,4, NOTE_D5,2
  
};

int melody2[] = {


  // Nokia Ringtone 
  // Score available at https://musescore.com/user/29944637/scores/5266155
  
  NOTE_E5, 8, NOTE_D5, 8, NOTE_FS4, 4, NOTE_GS4, 4, 
  NOTE_CS5, 8, NOTE_B4, 8, NOTE_D4, 4, NOTE_E4, 4, 
  NOTE_B4, 8, NOTE_A4, 8, NOTE_CS4, 4, NOTE_E4, 4,
  NOTE_A4, 2, 
};

int melody3[] = {



  // Pacman
  // Score available at https://musescore.com/user/85429/scores/107109
  NOTE_B4, 16, NOTE_B5, 16, NOTE_FS5, 16, NOTE_DS5, 16, //1
  NOTE_B5, 32, NOTE_FS5, -16, NOTE_DS5, 8, NOTE_C5, 16,
  NOTE_C6, 16, NOTE_G6, 16, NOTE_E6, 16, NOTE_C6, 32, NOTE_G6, -16, NOTE_E6, 8,

  NOTE_B4, 16,  NOTE_B5, 16,  NOTE_FS5, 16,   NOTE_DS5, 16,  NOTE_B5, 32,  //2
  NOTE_FS5, -16, NOTE_DS5, 8,  NOTE_DS5, 32, NOTE_E5, 32,  NOTE_F5, 32,
  NOTE_F5, 32,  NOTE_FS5, 32,  NOTE_G5, 32,  NOTE_G5, 32, NOTE_GS5, 32,  NOTE_A5, 16, NOTE_B5, 8
};

 int melody4[] = {


  // Pink Panther theme
  // Score available at https://musescore.com/benedictsong/the-pink-panther
  // Theme by Masato Nakamura, arranged by Teddy Mason

  NOTE_DS4,8, 
  NOTE_E4,-4, REST,8, NOTE_FS4,8, NOTE_G4,-4, REST,8, NOTE_DS4,8,
  NOTE_E4,-8, NOTE_FS4,8,  NOTE_G4,-8, NOTE_C5,8, NOTE_B4,-8, NOTE_E4,8, NOTE_G4,-8, NOTE_B4,8,   
  NOTE_AS4,2, NOTE_A4,-16, NOTE_G4,-16, NOTE_E4,-16, NOTE_D4,-16, 
  NOTE_E4,2, REST,4, REST,8
};

int melody5[] = {


  // Super Mario Bros theme
  // Score available at https://musescore.com/user/2123/scores/2145
  // Theme by Koji Kondo
  
  
  NOTE_E5,8, NOTE_E5,8, REST,8, NOTE_E5,8, REST,8, NOTE_C5,8, NOTE_E5,8, //1
  NOTE_G5,4, REST,4, NOTE_G4,8, REST,4, 
  NOTE_C5,-4, NOTE_G4,8, REST,4, NOTE_E4,-4, // 3
  NOTE_A4,4, NOTE_B4,4, NOTE_AS4,8, NOTE_A4,4,
  NOTE_G4,-8, NOTE_E5,-8, NOTE_G5,-8, NOTE_A5,4, NOTE_F5,8, NOTE_G5,8,
  REST,8, NOTE_E5,4,NOTE_C5,8, NOTE_D5,8, NOTE_B4,-4,
};

int melody6[] = {


  //Based on the arrangement at https://www.flutetunes.com/tunes.php?id=192
  
  NOTE_E5, 4,  NOTE_B4,8,  NOTE_C5,8,  NOTE_D5,4,  NOTE_C5,8,  NOTE_B4,8,
  NOTE_A4, 4,  NOTE_A4,8,  NOTE_C5,8,  NOTE_E5,4,  NOTE_D5,8,  NOTE_C5,8,
  NOTE_B4, -4,  NOTE_C5,8,  NOTE_D5,4,  NOTE_E5,4,
  NOTE_C5, 4,  NOTE_A4,4,  NOTE_A4,8,  NOTE_A4,4,   
};


int divider = 0;
int noteDuration = 0;
int wholenote = 0;
int notes = 0;


void melodia(int numeroMelodia) {

  int tempo = tempo1;
    Serial.println(tempo);
  //Serial.println("playing with tempo" + tempo);
  // this calculates the duration of a whole note in ms
   wholenote = (60000 * 4) / tempo;
   
   // sizeof gives the number of bytes, each int value is composed of two bytes (16 bits)
  // there are two values per note (pitch and duration), so for each note there are four bytes
//   int melody [] = melody2;
   notes = sizeof(melody2) / sizeof(melody2[0]) / 2;
   Serial.println("prueba2");
   Serial.println(notes);
   /* 
    for (int thisNote = 0; thisNote < notes * 2; thisNote = thisNote + 2) {

    // calculates the duration of each note
    divider = melody[thisNote + 1];
    if (divider > 0) {
      // regular note, just proceed
      noteDuration = (wholenote) / divider;
    } else if (divider < 0) {
      // dotted notes are represented with negative durations!!
      noteDuration = (wholenote) / abs(divider);
      noteDuration *= 1.5; // increases the duration in half for dotted notes
    }

    // we only play the note for 90% of the duration, leaving 10% as a pause
    tone(buzzer, melody[thisNote], noteDuration * 0.9);
    iluminarMelodia(melody[thisNote]);
    // Wait for the specief duration before playing the next note.
    delay(noteDuration);

    // stop the waveform generation before the next note.
    noTone(buzzer);
    
  };
  */
}


_______________________________________________________________
NUEVO ARCHIVO (Pitches.h)

//Documento que define todas las frecuancias equivalentes a las notas
#define NOTE_B0  31
#define NOTE_C1  33
#define NOTE_CS1 35
#define NOTE_D1  37
#define NOTE_DS1 39
#define NOTE_E1  41
#define NOTE_F1  44
#define NOTE_FS1 46
#define NOTE_G1  49
#define NOTE_GS1 52
#define NOTE_A1  55
#define NOTE_AS1 58
#define NOTE_B1  62
#define NOTE_C2  65
#define NOTE_CS2 69
#define NOTE_D2  73
#define NOTE_DS2 78
#define NOTE_E2  82
#define NOTE_F2  87
#define NOTE_FS2 93
#define NOTE_G2  98
#define NOTE_GS2 104
#define NOTE_A2  110
#define NOTE_AS2 117
#define NOTE_B2  123
#define NOTE_C3  131
#define NOTE_CS3 139
#define NOTE_D3  147
#define NOTE_DS3 156
#define NOTE_E3  165
#define NOTE_F3  175
#define NOTE_FS3 185
#define NOTE_G3  196
#define NOTE_GS3 208
#define NOTE_A3  220
#define NOTE_AS3 233
#define NOTE_B3  247
#define NOTE_C4  262
#define NOTE_CS4 277
#define NOTE_D4  294
#define NOTE_DS4 311
#define NOTE_E4  330
#define NOTE_F4  349
#define NOTE_FS4 370
#define NOTE_G4  392
#define NOTE_GS4 415
#define NOTE_A4  440
#define NOTE_AS4 466
#define NOTE_B4  494
#define NOTE_C5  523
#define NOTE_CS5 554
#define NOTE_D5  587
#define NOTE_DS5 622
#define NOTE_E5  659
#define NOTE_F5  698
#define NOTE_FS5 740
#define NOTE_G5  784
#define NOTE_GS5 831
#define NOTE_A5  880
#define NOTE_AS5 932
#define NOTE_B5  988
#define NOTE_C6  1047
#define NOTE_CS6 1109
#define NOTE_D6  1175
#define NOTE_DS6 1245
#define NOTE_E6  1319
#define NOTE_F6  1397
#define NOTE_FS6 1480
#define NOTE_G6  1568
#define NOTE_GS6 1661
#define NOTE_A6  1760
#define NOTE_AS6 1865
#define NOTE_B6  1976
#define NOTE_C7  2093
#define NOTE_CS7 2217
#define NOTE_D7  2349
#define NOTE_DS7 2489
#define NOTE_E7  2637
#define NOTE_F7  2794
#define NOTE_FS7 2960
#define NOTE_G7  3136
#define NOTE_GS7 3322
#define NOTE_A7  3520
#define NOTE_AS7 3729
#define NOTE_B7  3951
#define NOTE_C8  4186
#define NOTE_CS8 4435
#define NOTE_D8  4699
#define NOTE_DS8 4978
#define REST 0
